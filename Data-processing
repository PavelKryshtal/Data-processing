// The program analyzes the positions of substrate atoms (graphene or BN) after their sputtering by C60 projectile and counts the sputtered mass.
// Input files MUST have .lammpstrj format and should be generated by LAMMPS Molecular Dynamics Simulator (v. 2019)
// The name of the input file must have the following format:
    // energy + "keVC60_BN_" + angle + "deg_" + x-coordinate + "_" + y-coordinate + ".lammpstrj"  (in BN substrate case)
    // energy + "keVC60_Graphene_1L_" + angle + "deg_" + x-coordinate + "_" + y-coordinate + ".lammpstrj" (in graphene substrate case)

// Output: Dependence of the average sputtering mass on the projectile impact angle.

// version 1.0
// 21.02.2020

#include <iostream>
#include <string>
#include <cmath>
#include <fstream>
using namespace std;


int main()

{
    int cx = -20; //x coordinate
    int cy = -20;//y coordinate
    int a = -20; // parameter for cx
    int h = 0; //pointer for array

    //------------------Enter parameters
    string energy;
    int angle;
    string element;
    string path;  //Name of file
    int Z; // Z coordinate of researched atom
    cout << "Enter energy: ";
    cin >> energy;
    cout << "Enter angle: ";
    cin >> angle;
    cout << "Enter element: ";
    cin >> element;

    //---------------Open file
    string EndFile = "Smass-Angle" + element + ".txt";//Create new *.txt file for data output
    ofstream fout;
    fout.open(EndFile);
    fout << "Energy  Angle  Sputtering mass" << endl;

    double SSmass[30];
    while (angle < 90)
    {
        cx = -20;
        cy = -20;
        int h = 0; //pointer to array
        while (cx < 21 & cy < 21) //---------------------------------------Cycle for all points-----------------------------------------------------
        {
            //setlocale(LC_ALL, "ru");
            setlocale(LC_ALL, "en-US");
            int NumberOfString;
            string s;
            ifstream fin;
            string ln[20];
            double Smass = 0.0001;

            int x; // number of elements in the s string

            int StringLength;

            string tm = ""; //time
            if (element == "BN") { //Define element
                NumberOfString = 46280;
                StringLength = 11; //Number of row
                path = energy + "keVC60_BN_" + to_string(angle) + "deg_" + to_string(cx) + "_" + to_string(cy) + ".lammpstrj";
            }
            else {
                NumberOfString = 48261;
                StringLength = 12; //Number of row
                path = energy + "keVC60_Graphene_1L_" + to_string(angle) + "deg_" + to_string(cx) + "_" + to_string(cy) + ".lammpstrj";
            }

            cout << path << endl;

            fin.open(path);
            // Check the possible to open file
            if (!fin.is_open())
            {
                cout << "File " + path + " do not find. Check your folder" << endl; // Message if file did not open
            }
            else
            {
                string delimiter = " ";
                int count2 = 0;
                int count = 0;

                cout << "Let's go!" << endl;

                while (!fin.eof())
                {

                    s = "";
                    getline(fin, s);

                    int tm2 = atoi(tm.c_str());
                    if (s == "ITEM: TIME")
                    {
                        // out data
                        if (tm != "") cout << "time " + tm + " B " + to_string(count) + " N " + to_string(count2) << endl;
                        getline(fin, tm);
                        count = 0;
                        count2 = 0;
                    }
                    // ------- split line to array
                    size_t pos = 0;
                    x = 0;
                    string token;
                    while ((pos = s.find(delimiter)) != std::string::npos) {
                        token = s.substr(0, pos);
                        ln[x] = token;
                        x++;
                        s.erase(0, pos + delimiter.length());
                    }

                    if (x == StringLength)
                    {
                        int FirstColomn = atoi(ln[0].c_str());//convert string to int
                        string ss;
                        //cout << count14 << endl;
                        if (element == "BN")
                        {
                            ss = ln[4];
                        }
                        else {
                            ss = ln[5];
                        }

                        pos = 0;
                        pos = ss.find('.');
                        double f;
                        char *stopstring;

                        f = strtod(ss.c_str(), &stopstring);
                        // If z coordinate of atoms has z-5 value or less then this atom is recognized as sputtered and will be counted
                        if (f < -5 & FirstColomn < NumberOfString)
                        {
                            if (element == "BN")
                            {
                                if (ln[1] == "B")
                                {
                                    count++;
                                }
                                else {
                                    count2++;
                                }
                            }
                            else if (element == "C")
                            {
                                count++;
                            }
                        }
                    }
                }
                //----------------Transform number of atoms to mass
                if (element == "BN") {
                    Smass = count * 10.811 + count2 * 14.0067;
                }
                else {
                    Smass = count * 12.01115;
                }
                if (element == "BN")
                {
                    cout << "time " + tm + " B " + to_string(count) + " N " + to_string(count2) + " Sputtered mass " + to_string(Smass) << endl; // print last line
                }
                else {
                    cout << "time " + tm + " C " + to_string(count) + " Sputtered mass " + to_string(Smass) << endl; // print last line
                }
            }

            if (Smass >= 0)
            {
                SSmass[h] = Smass;
                cout << "SSmass: " + to_string(SSmass[h]) << endl;
                cout << "h: " + to_string(h) << endl;
                h++;
            }

            //------------- cycle files
            if (cx == cx & cy != 20)
            {
                cy = cy + 10;
            }
            else if (cx == cx & cy == 20)
            {
                cx = cx + 10;
                cy = -20;
            }
        }
        cout << "h: " + to_string(h) << endl;
        int b = h;
        double sum = 0;
        int h2 = 0;

        for (h = 0; h < b; h++)
        {
            sum = sum + SSmass[h];
        }
        // Calculate the average sputtered mass
        cout << "Sum: " + to_string(sum) << endl;
        sum = sum / h;
        cout << "Average number: " + to_string(sum) << endl;

        cout << energy << endl;

        fout << energy + " " + to_string(angle) + " " + to_string(sum) << endl;
        // Repeat program for defined impact angle of projectile
        if (angle == 0)
        {
            angle = 15;
        }
        else if (angle == 15)
        {
            angle = 30;
        }
        else if (angle == 30)
        {
            angle = 45;
        }
        else if (angle == 45)
        {
            angle = 60;
        }

        else if (angle == 60)
        {
            angle = 65;
        }
        else if (angle == 65)
        {
            angle = 80;
        }

        else if (angle == 80)
        {
            angle = 91;
        }
    }

    fout.close();
    return 0;
}
